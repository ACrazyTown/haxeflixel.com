// Generated by CoffeeScript 1.10.0
var docpadConfig, marked, markedOptions;

marked = require('marked');

markedOptions = {
  pedantic: false,
  gfm: true,
  sanitize: false,
  highlight: null
};

marked.setOptions(markedOptions);

docpadConfig = {
  ignorePaths: [__dirname + '/src/documents/documentation/api'],
  templateData: {
    site: {
      url: "http://haxeflixel.com",
      title: "HaxeFlixel 2D Game Engine",
      name: "HaxeFlixel",
      description: "HaxeFlixel is a 2D Game Engine that lets you create cross-platform games easier with free, open source technology!",
      keywords: "gamedev, game development, cross-platform, haxe, flixel",
      styles: ["/styles/bootstrap.css", "/styles/style.css", "/styles/site.css", "/styles/monokai-sublime.css"],
      scripts: ["//cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js", "//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js", "/vendor/twitter-bootstrap-3/js/dropdown.js", "/vendor/twitter-bootstrap-3/js/transition.js", "/vendor/twitter-bootstrap-3/js/collapse.js"],
      services: {
        googleAnalytics: 'UA-35511281-1',
        disqus: 'haxeflixel'
      }
    },
    getPreparedTitle: function() {
      if (this.document.title) {
        return this.document.title + " | " + this.site.title;
      } else {
        return this.site.title;
      }
    },
    getDocumentMenuTitle: function(title) {
      if (title.length > 28) {
        return (title.substring(0, 20)) + " ...";
      } else {
        return title;
      }
    },
    getShowcaseActive: function(status) {
      if (status) {
        return 'showcases-target-actives';
      } else {
        return 'showcases-target';
      }
    },
    getPreparedDescription: function() {
      return this.document.description || this.site.description;
    },
    getPreparedKeywords: function() {
      return this.site.keywords.concat(this.document.keywords || []).join(', ');
    },
    getThumbCustom: function(test) {
      var path, url;
      url = "/images/demos/";
      return path = "" + url + test + " ";
    },
    getPagerNext: function(collection) {
      var docsCollection, i, index, item, len, ref;
      docsCollection = this.getCollection(collection);
      ref = docsCollection.models;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        item = ref[index];
        if (item.id === this.document.id) {
          break;
        }
      }
      return docsCollection.models[index + 1];
    },
    getPagerPrevious: function(collection) {
      var docsCollection, i, index, item, len, ref;
      docsCollection = this.getCollection(collection);
      ref = docsCollection.models;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        item = ref[index];
        if (item.id === this.document.id) {
          break;
        }
      }
      return docsCollection.models[index - 1];
    },
    getFirst: function(collection) {
      var docsCollection;
      docsCollection = this.getCollection(collection);
      return docsCollection.models[0];
    },
    getLast: function(collection) {
      var docsCollection;
      docsCollection = this.getCollection(collection);
      return docsCollection.models[docsCollection.length - 1];
    }
  },
  collections: {
    blog: function(database) {
      var sorting;
      sorting = [
        {
          filename: -1
        }
      ];
      return database.findAllLive({
        layout: {
          $has: 'blog-post'
        }
      }, sorting).on('add', function(document) {
        var a, contentPreview;
        a = document.attributes;
        contentPreview = a.content.substring(0, 150);
        contentPreview = contentPreview + " ...";
        contentPreview = marked(contentPreview);
        a.postDate = "posted : " + a.postDate;
        return document.setMetaDefaults({
          contentPreview: contentPreview
        });
      });
    },
    demos: function(database) {
      return database.findAllLive({
        layout: {
          $has: 'demo'
        }
      }, [
        {
          date: -1
        }
      ]);
    },
    showcase: function(database) {
      return database.findAllLive({
        layout: {
          $has: 'showcase'
        }
      }, [
        {
          date: -1
        }
      ]);
    },
    homepage_demos: function(database) {
      return database.findAllLive({
        tags: {
          $has: 'homepage_demo'
        }
      }, [
        {
          date: -1
        }
      ]);
    },
    getting_started: function(database) {
      var query, sorting;
      query = {
        write: true,
        relativeOutDirPath: {
          $endsWith: '00_getting_started'
        },
        body: {
          $ne: ""
        }
      };
      sorting = [
        {
          categoryDirectory: 1,
          filename: 1
        }
      ];
      return database.findAllLive(query, sorting).on('add', function(document) {
        var a, categoryName, categoryTitle, editUrl, githubEditUrl, index, layout, urls;
        a = document.attributes;
        index = 0;
        layout = 'doc';
        urls = ['/documentation/' + a.basename.replace(/^[\-0-9]+/, '')];
        categoryName = 'getting_started';
        categoryTitle = 'Getting Started';
        githubEditUrl = 'https://github.com/HaxeFlixel/flixel-docs/blob/master/documentation/00_getting_started/';
        editUrl = githubEditUrl + a.basename + '.html.md';
        return document.setMetaDefaults({
          layout: layout,
          url: urls[0],
          categoryName: categoryName,
          categoryTitle: categoryTitle,
          editUrl: editUrl,
          index: index
        }).addUrl(urls);
      });
    },
    tutorial: function(database) {
      var query, sorting;
      query = {
        write: true,
        relativeOutDirPath: {
          $endsWith: '04_tutorial'
        },
        body: {
          $ne: ""
        }
      };
      sorting = [
        {
          categoryDirectory: 1,
          filename: 1
        }
      ];
      return database.findAllLive(query, sorting).on('add', function(document) {
        var a, categoryName, categoryTitle, editUrl, githubEditUrl, index, layout, urls;
        a = document.attributes;
        index = 1;
        layout = 'doc';
        categoryName = 'tutorial';
        categoryTitle = 'Tutorial';
        urls = ['/documentation/' + a.basename.replace(/^[\-0-9]+/, '')];
        githubEditUrl = "https://github.com/HaxeFlixel/flixel-docs/blob/master/documentation/04_tutorial/";
        editUrl = githubEditUrl + a.basename + '.html.md';
        return document.setMetaDefaults({
          layout: layout,
          url: urls[0],
          categoryName: categoryName,
          categoryTitle: categoryTitle,
          editUrl: editUrl,
          index: index
        }).addUrl(urls);
      });
    },
    handbook: function(database) {
      var query, sorting;
      query = {
        write: true,
        relativeOutDirPath: {
          $endsWith: '02_handbook'
        },
        body: {
          $ne: ""
        }
      };
      sorting = [
        {
          categoryDirectory: 1,
          filename: 1
        }
      ];
      return database.findAllLive(query, sorting).on('add', function(document) {
        var a, categoryName, categoryTitle, editUrl, githubEditUrl, index, layout, urls;
        a = document.attributes;
        index = 2;
        layout = 'doc';
        categoryName = 'handbook';
        categoryTitle = "Handbook";
        urls = ['/documentation/' + a.basename.replace(/^[\-0-9]+/, '')];
        githubEditUrl = 'https://github.com/HaxeFlixel/flixel-docs/blob/master/documentation/02_handbook/';
        editUrl = githubEditUrl + a.basename + '.html.md';
        return document.setMetaDefaults({
          layout: layout,
          url: urls[0],
          categoryName: categoryName,
          categoryTitle: categoryTitle,
          editUrl: editUrl,
          index: index
        }).addUrl(urls);
      });
    },
    resources: function(database) {
      var query, sorting;
      query = {
        write: true,
        relativeOutDirPath: {
          $endsWith: '03_resources'
        },
        body: {
          $ne: ""
        }
      };
      sorting = [
        {
          categoryDirectory: 1,
          filename: 1
        }
      ];
      return database.findAllLive(query, sorting).on('add', function(document) {
        var a, categoryName, categoryTitle, editUrl, githubEditUrl, index, layout, urls;
        a = document.attributes;
        index = 3;
        layout = 'doc';
        categoryName = 'resources';
        categoryTitle = 'Resources';
        urls = ['/documentation/' + a.basename.replace(/^[\-0-9]+/, '')];
        githubEditUrl = "https://github.com/HaxeFlixel/flixel-docs/blob/master/documentation/03_resources/";
        editUrl = githubEditUrl + a.basename + '.html.md';
        return document.setMetaDefaults({
          layout: layout,
          url: urls[0],
          categoryName: categoryName,
          categoryTitle: categoryTitle,
          editUrl: editUrl,
          index: index
        }).addUrl(urls);
      });
    },
    community: function(database) {
      var query, sorting;
      query = {
        write: true,
        relativeOutDirPath: {
          $endsWith: '01_community'
        },
        body: {
          $ne: ""
        }
      };
      sorting = [
        {
          categoryDirectory: 1,
          filename: 1
        }
      ];
      return database.findAllLive(query, sorting).on('add', function(document) {
        var a, categoryName, categoryTitle, editUrl, githubEditUrl, index, layout, urls;
        a = document.attributes;
        index = 4;
        layout = 'doc';
        categoryName = 'community';
        categoryTitle = 'Community';
        urls = ['/documentation/' + a.basename.replace(/^[\-0-9]+/, '')];
        githubEditUrl = 'https://github.com/HaxeFlixel/flixel-docs/blob/master/documentation/01_community/';
        editUrl = githubEditUrl + a.basename + '.html.md';
        return document.setMetaDefaults({
          layout: layout,
          url: urls[0],
          editUrl: editUrl,
          categoryName: categoryName,
          categoryTitle: categoryTitle,
          index: index
        }).addUrl(urls);
      });
    },
    rootDocuments: function(database) {
      var query, sorting;
      query = {
        write: true,
        relativeOutDirPath: {
          $startsWith: 'documentation'
        },
        body: {
          $ne: ""
        },
        rootDoc: true
      };
      sorting = [
        {
          index: 1
        }
      ];
      return database.findAllLive(query, sorting).on('add', function(document) {
        var a, categoryName, editUrl, githubEditUrl, layout, urls;
        a = document.attributes;
        layout = 'doc';
        categoryName = 'resources';
        urls = ['/documentation/' + a.basename.replace(/^[\-0-9]+/, '')];
        githubEditUrl = "https://github.com/HaxeFlixel/flixel-docs/blob/master/documentation/";
        editUrl = githubEditUrl + a.basename;
        return document.setMetaDefaults({
          layout: layout,
          url: urls[0],
          categoryName: categoryName,
          editUrl: editUrl
        }).addUrl(urls);
      });
    }
  },
  plugins: {
    cleanurls: {
      enabled: true
    },
    markedOptions: {
      gfm: true
    },
    highlightjs: {
      aliases: {
        haxe: 'actionscript'
      }
    },
    thumbnails: {
      imageMagick: true
    },
    repocloner: {
      repos: [
        {
          name: 'HaxeFlixelDocumentation',
          path: 'src/documents/documentation',
          url: 'https://github.com/HaxeFlixel/flixel-docs.git'
        }
      ]
    }
  }
};

module.exports = docpadConfig;
